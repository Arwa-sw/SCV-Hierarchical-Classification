
Sample code: This example code14a represents the DAO attack, the attacker can withdraw infinite money (till drain the funds) because the function does not check the variable amount for underflow.  Also, code14b shows a loop which can be infinite (till drain all gas), if the attacker increment the number of iterations of the loop, for example, by registering new users of the contract. Code14c part from ERC20.sol shows the possibity of occuring division by zero in the step return.
a:  function withdraw(uint  amount) {
	require(balances[msg.sender] - amount > 0);
	msg.sender.transfer(amount);
	balances[msg.sender] -= amount;
}
b:  for (int i = 0; i < participants.length; i ++) {
	// ...
}
c:  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b <= a);
    uint256 c = a - b;

    return c;
  }
  function mod(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b != 0);
    return a % b;
  }
source: ERC20.sol
