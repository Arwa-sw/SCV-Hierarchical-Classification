1.	Describe: Typecasting (conversion between different data types) is a common technique in the programming languages. However, this should be used with caution with smart contracts as unintended and irreversible consequences can arise and it may cause to lose the data when converting representations.  
Sample code: As shown in the figure below, smart contract wallet references the instance t to call the sub() function in the contract Typecasttest_1. When the function transfer() is running, the parameter assignment of the contract address is changed to Typecasttest_1. However, the solidity compiler will only check whether the contract declares the function sub(), and will not check the consistency of the address parameter and Typecasttest_1's parameters. Assuming that the attacker's contract Typecasttest_2 has the same sub() function, it will be executed by the EVM.
This kind of loophole is caused by its own flaws in the solidity language's type system, and there is no good way to solve this loophole.

Its danger: FirePonzi/King of the Ether Throne and GovernMental
Solution: 
Explicitly declaring data types is recommended to avoid unexpected behaviors and/or errors.
VeriSolid can be used to build and deploy smart contracts that are free from this vulnerability in Solidity./To prevent typecasting to malicious contracts, the new keyword can be used. This way an instance of the referenced contract cannot be changed without modifying the contract as this is created at deployment time. Another technique is to hard code any external contract address in the contract to avoid malicious contracts getting referenced.   
Tools can detect: Securify, Mythril
