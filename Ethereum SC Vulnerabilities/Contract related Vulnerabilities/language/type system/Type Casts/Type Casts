Sample code: As shown in the figure below, smart contract wallet references the instance t to call the sub() function in the contract Typecasttest_1. When the function transfer() is running, the parameter assignment of the contract address is changed to Typecasttest_1. However, the solidity compiler will only check whether the contract declares the function sub(), and will not check the consistency of the address parameter and Typecasttest_1's parameters. Assuming that the attacker's contract Typecasttest_2 has the same sub() function, it will be executed by the EVM.
This kind of loophole is caused by its own flaws in the solidity language's type system, and there is no good way to solve this loophole.
a:  contract Typecasttest_1{
function sub(uint a)
public return (uint) { 
//….. } }
contract Typecasttest_2 {
function sub(uint b)
public return (uint) { 
//….. } }
contract wallet {
function transfer (Typecasttest_1 t)  public {
t.add(1); }
}
b: contract Storage {
    uint n;
    string s;
    address a;
    uint8 number;
    function store(uint256 num) public {
        number = num;
    }
  function test() public view {
        bytes32 b1 = bytes32(n);
        bytes32 b2 = bytes32(a);
        bytes32 b4 = bytes32("string");
        bytes memory b5 = bytes(s);
    } }