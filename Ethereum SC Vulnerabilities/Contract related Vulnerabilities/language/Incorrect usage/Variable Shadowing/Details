63.	Variable Shadowing.( Variable Shadowing / Built-in symbol shadowing)
Describe: Shadowing means an element hiding another element with the same name. It occurs when the developer uses the same name of an element (local variable, function, or event) in different scopes (multiple definitions for the same name), which would result in two separate versions of the element, hence the incorrect reference.
Sample code:
a: pragma solidity 0.4.24;
contract ShadowingExp {
    uint a = 2;
    uint b = 3;
    function test1() constant returns (uint a) {
        return a; // l return 0     }
    function test2() constant returns (uint a) {
        n = 10;
        return a; // return 10     }
    function test3() constant returns (uint a) {
        uint n = 2;
        return a+b; // return 2
    }
}
the name of variable a was repeated as local variable and in the three functions.   
b: contract A {
  uint a = 1; }
contract B is A {
  uint a = 2; }
Also, the shadowing can happen with inheritance. Here the variable a is defined twice in the super contract and sub contract but with different values 
Its danger:
Solution: Review storage variable layouts for your contract systems carefully and remove any ambiguities. Always check for compiler warnings as they can flag the issue within a single contract.
Tools can detect:  Slither
